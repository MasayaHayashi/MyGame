//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// Block.cpp
// ブロッククラス
// Author : Masaya Hayashi
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

// ===== インクルード部 =====
#include "../Block/Block.h"
#include "../ResoueceManager/ResourceManager.h"
#include "../Collision/Collision.h"

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// コンストラクタ
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Block::Block()
{

}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// コンストラクタ
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Block::Block(UINT uSetNumber)
{
	// ブロックの種類初期化
	tagName = "NormalBlock";
	myGameObjType = GAME_OBJ_TYPE::NormalBlockObj;

	// 選択番号初期化
	idNumber = uSetNumber;	// 識別番号
	uCurrentSelect = 0;		// 現在の選択番号

	Collision::registerList(&myTransform, "Block");

	// 使用フラグ更新
	
	if (idNumber == 0)
	{
		isUsed = true;
	}
	else
	{
		isUsed = false;
	}
}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// デストラクタ
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Block::~Block()
{

}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// ブロック初期化
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::initialize()
{
	// ファイルパス設定
	strcpy_s(fileName, ModelPass.c_str());
	strcpy_s(texFileName, TexturePass.c_str());

	// モデル生成
	ResourceManager::makeModel(meshDataObj, fileName, meshType);
	ResourceManager::createTexture(textureData, texFileName);


	// 位置、移動量、拡大率初期化
	myTransform.scale = D3DXVECTOR3(1.0f, 1.0f, 1.0f);
	myTransform.rotDeg = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	myTransform.pos = D3DXVECTOR3(0.0f, -meshDataObj.collitionBox.y * 2, 0.0f);

}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// ブロック後処理
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::finalize()
{
	ResourceManager::destroyAllMesh();
	ResourceManager::destroyAllTexture();
}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// ブロック更新
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::update()
{
	// コライダー更新
//	pCollider->UpdateCollider(mtxWorldPawn, FIELD_BOX_COLOR );

	// 書き出し用データ更新
	updateExportData();
}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// ブロック描画
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::draw()
{
	// 例外処理
	if (!isUsed)
	{
		return;
	}

	// 描画
	Pawn::draw();

}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 描画
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::draw(D3DXMATRIX mtxView, D3DXMATRIX mtxProj)
{
	// 例外処理
	if (!isUsed)
	{
		return;
	}

	// 描画
	Pawn::draw(mtxView,mtxProj);

}

//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 選択番号セット
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
void Block::SetSelectNum(UINT uSetNumber)
{
	uCurrentSelect = uSetNumber;
}